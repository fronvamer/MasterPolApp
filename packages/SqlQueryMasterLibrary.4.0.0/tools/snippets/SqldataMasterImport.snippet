<CodeSnippet Format="1.0.0">
  <Header>
    <Title>log</Title>
    <Shortcut>log</Shortcut>
    <Description>Console log</Description>
    <Author>name</Author>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>message</ID>
        <ToolTip>Message to log</ToolTip>
        <Default>message</Default>
      </Literal>
    </Declarations>
    <Code Language="csharp">
		<![CDATA[
	 
using MasterPolApp.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Remoting.Contexts;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MasterPolApp
{
    public partial class Form1 : Form
    {
        private readonly DbModel _context;
        public Form1()
        {
            InitializeComponent();
            _context = new DbModel();
            LoadPartners();
        }




        //private void LoadPartners()
        //{
        //    using (var context = new DbModel())
        //    {
        //        var partners = context.Partners
        //            .Include(p => p.PartnerProducts)
        //            .ToList();
        //         dataGridViewPartners.DataSource = partners; 
        //    }
        //}

        private void LoadPartners()
        {
            using (var context = new DbModel())
            {
                var partners = context.Partners
                    .Include(p => p.PartnerProducts) // загрузим связанные данные
                    .ToList() // загружаем из БД, теперь мы в памяти

                    .Select(p => new
                    {
                        Номер_пп = p.Id,
                        Наименование = p.Name,
                        Директор = p.Director,
                        Почта = p.Email,
                        Адрес = p.Address,
                        ИНН = p.INN,
                        Телефон = p.Phone,
                        Рейтинг = p.Rating,
                        Скидка = p.Discount 
                    })
                    .ToList();

                dataGridViewPartners.DataSource = partners;
            }
        }


        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void buttonGoToAddPartner_Click(object sender, EventArgs e)
        {
            tabControlMain.SelectedIndex = 2;
        }

        private void buttonRefreshPartners_Click(object sender, EventArgs e)
        {
            LoadPartners();
        }

        private void buttonDeletePartner_Click(object sender, EventArgs e)
        {
            if (dataGridViewPartners.CurrentRow == null)
            {
                MessageBox.Show("Выберите партнёра для удаления.");
                return;
            }

            var result = MessageBox.Show("Вы уверены, что хотите удалить выбранного партнёра?", "Подтверждение удаления", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result != DialogResult.Yes)
                return;

            int partnerId = (int)dataGridViewPartners.CurrentRow.Cells["Номер_пп"].Value;

            using (var context = new DbModel())
            {
                var partnerToDelete = context.Partners.FirstOrDefault(p => p.Id == partnerId);
                if (partnerToDelete != null)
                {
                    context.Partners.Remove(partnerToDelete);
                    context.SaveChanges();
                    MessageBox.Show("Партнёр успешно удалён.");

                    LoadPartners(); // Обновить таблицу после удаления
                }
                else
                {
                    MessageBox.Show("Партнёр не найден в базе данных.");
                }
            }
        }

        private void LoadComboBoxHistory()
        {
            using (var context = new DbModel())
            {
                var partners = context.Partners
                    .Select(p => new { p.Id, p.Name })
                    .ToList();

                comboBoxHistory.DisplayMember = "Name";
                comboBoxHistory.ValueMember = "Id";
                comboBoxHistory.DataSource = partners;
            }
        }
        private void LoadHistory(int? partnerId = null)
        {
            using (var context = new DbModel())
            {
                var query = context.PartnerProducts
                    .Include(pp => pp.Partners)
                    .Include(pp => pp.Products)
                    .AsQueryable();

                if (partnerId.HasValue)
                {
                    query = query.Where(pp => pp.PartnerId == partnerId.Value);
                }

                var historyData = query
                    .Select(pp => new
                    {
                        Номер_пп = pp.Id,
                        Наименование_партнера = pp.Partners.Name,
                        Наименование_продукта = pp.Products.Name,
                        Количество = pp.Quantity,
                        Дата_продажи = pp.SaleDate
                    })
                    .ToList();

                dataGridViewHistory.DataSource = historyData;
            }
        }
        private void tabControlMain_SelectedIndexChanged(object sender, EventArgs e)
        {

            // Загрузка истории при переходе на вкладку "История"
            if (tabControlMain.SelectedIndex == 1)
            {
                LoadComboBoxHistory();
                LoadHistory(); 
            }

            if (tabControlMain.SelectedIndex == 3)
            {
                LoadComboBoxUpdatePartner();    
            }
            if (tabControlMain.SelectedIndex == 4)
            {
                LoadComboBoxAddSalePartner();
                LoadComboBoxAddSaleProduct();
            }
        }
        private void comboBoxHistory_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxHistory.SelectedValue is int selectedPartnerId)
            {
                LoadHistory(selectedPartnerId);
            }
        }

        private void tabPageHistory_Click(object sender, EventArgs e)
        {

        }

        private void buttonAddPartner_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(textBoxAddPartnerName.Text))
            {
                MessageBox.Show("Введите название партнера");
                return;
            }

            if (!int.TryParse(textBoxAddPartnerRating.Text.Trim(),out int rating))
            {
                MessageBox.Show("Введите корректное число для рейтинга");
                return;
            }

            using (var context = new DbModel())
            {
                var newPartner = new Partners
                {
                    Name = textBoxAddPartnerName.Text,
                    Director = textBoxAddPertnerDirector.Text,  
                    Email = textBoxAddPartnerEmail.Text,    
                    Address = textBoxAddParentAddress.Text, 
                    INN = textBoxAddPartnerINN.Text,
                    Phone = textBoxAddPartnerPhone.Text,    
                    Rating = rating,  

                };

                context.Partners.Add(newPartner);
                context.SaveChanges();

            }
            MessageBox.Show("Партнер успешно добавлен");

            LoadPartners();
        }

        private void LoadComboBoxUpdatePartner()
        {

            using (var context = new DbModel())
            {
                var partners = context.Partners
                    .Select(p => new {p.Id,p.Name })
                    .ToList();
                comboBoxUpdatePartner.DisplayMember = "Name";
                comboBoxUpdatePartner.ValueMember = "Id";
                comboBoxUpdatePartner.DataSource = partners;    
            }
        }
  
        private void comboBoxUpdatePartner_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxUpdatePartner.SelectedValue is int selectedPartnerId)
            {
                using (var context = new DbModel())
                {
                    var partner = context.Partners
                        .Include(p => p.PartnerProducts) // ВАЖНО: загрузка связанных данных
                        .FirstOrDefault(p => p.Id == selectedPartnerId);

                    if (partner != null)
                    {
                        textBoxUpdatePartnerName.Text = partner.Name;
                        textBoxUpdatePartnerDirector.Text = partner.Director;
                        textBoxUpdatePartnerEmail.Text = partner.Email;
                        textBoxUpdatePartnerAddress.Text = partner.Address;
                        textBoxUpdatePartnerINN.Text = partner.INN;
                        textBoxUpdatePartnerPhone.Text = partner.Phone;
                        textBoxUpdatePartnerRating.Text = Convert.ToString(partner.Rating);
                    }
                }
            }
        }

        private void buttonUpdatePartner_Click(object sender, EventArgs e)
        {
            if (comboBoxUpdatePartner.SelectedValue is int selectedPartnerId)
            {
                using (var context = new DbModel())
                {
                    var partner = context.Partners
                        .Include(p => p.PartnerProducts) // ВАЖНО: загрузка связанных данных
                        .FirstOrDefault(p => p.Id == selectedPartnerId);

                    if (partner != null)
                    {
                        partner.Name = textBoxUpdatePartnerName.Text;
                        partner.Director = textBoxUpdatePartnerDirector.Text;
                        partner.Email = textBoxUpdatePartnerEmail.Text;
                        partner.Address = textBoxUpdatePartnerAddress.Text;
                        partner.INN = textBoxUpdatePartnerINN.Text;
                        partner.Phone = textBoxUpdatePartnerPhone.Text;

                        if (int.TryParse(textBoxUpdatePartnerRating.Text, out int rating))
                        {
                            partner.Rating = rating;
                        }
                        else
                        {
                            MessageBox.Show("Введите корректный рейтинг.");
                            return;
                        }

                        context.SaveChanges();
                        MessageBox.Show("Информация о партнёре обновлена.");
                        LoadPartners();
                    }
                }
            }
        }


        private void buttonPartnerEditNavigate_Click(object sender, EventArgs e)
        {
            if (dataGridViewPartners.CurrentRow == null)
            {
                MessageBox.Show("Сначала выберите партнёра для редактирования.", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            int selectedPartnerId = (int)dataGridViewPartners.CurrentRow.Cells["Номер_пп"].Value;

            tabControlMain.SelectedIndex = 3; // Переключаемся на вкладку редактирования

            LoadComboBoxUpdatePartner();

            // Установка выбранного партнёра в comboBox
            comboBoxUpdatePartner.SelectedValue = selectedPartnerId;
        }

        private void CheckMaterial ()
        {
            int materialNeeded = CalculateRequiredMaterial(
        productTypeId: 2,
        productCount: 100,
        parameter1: 1.2,
        parameter2: 1.5
    );

            MessageBox.Show($"Необходимое количество материала: {materialNeeded}");
        }


        private int CalculateRequiredMaterial( int productTypeId, int productCount, double parameter1, double parameter2)
        {
            if (productCount <= 0 || parameter1 <= 0 || parameter2 <= 0)
                return -1;

            using (var context = new DbModel())
            {
                var productType = context.ProductTypes.Find(productTypeId);

                if (productType == null)
                    return -1;

                double baseAmountPerProduct = parameter1 * parameter2 * productType.Rate;
                double totalMaterial = baseAmountPerProduct * productCount;

                double wasteFactor = 1 + (productType.WastePercentage / 100.0);
                double finalAmount = totalMaterial * wasteFactor;

                return (int)Math.Ceiling(finalAmount); // округляем вверх
            }
        }

        private void LoadComboBoxAddSalePartner()
        {
            using (var context = new DbModel())
            {
                var partners = context.Partners
                    .Select(p => new { p.Id, p.Name })
                    .ToList();

                comboBoxAddSalePartner.DisplayMember = "Name";
                comboBoxAddSalePartner.ValueMember = "Id";
                comboBoxAddSalePartner.DataSource = partners;
            }
        }
        private void LoadComboBoxAddSaleProduct()
        {
            using (var context = new DbModel())
            {
                var products = context.Products
                    .Select(p => new { p.Id, p.Name })
                    .ToList();
                comboBoxAddSaleProduct.DisplayMember = "Name";
                comboBoxAddSaleProduct.ValueMember = "Id";
                comboBoxAddSaleProduct.DataSource = products;

            }
        }
     

        private void buttonAddPartnerProducts_Click(object sender, EventArgs e)
        {

           
            if (string.IsNullOrWhiteSpace(comboBoxAddSalePartner.Text))
            {
                MessageBox.Show("Выберите название партнера");
                return;
            }

            if (string.IsNullOrWhiteSpace(comboBoxAddSaleProduct.Text))
            {
                MessageBox.Show("Выберите продукт");
                return;
            }
            if (!int.TryParse(textBoxAddSaleQuanity.Text.Trim(), out int quanity))
            {
                MessageBox.Show("Введите корректное число для количества");
                return;
            }

            using (var context = new DbModel())
            {
                var newPartnerProducts = new PartnerProducts
                {
                    PartnerId = (int)comboBoxAddSalePartner.SelectedValue,
                    ProductId = (int)comboBoxAddSaleProduct.SelectedValue,
                    Quantity = quanity,
                    SaleDate = DateTime.Today

                };
                context.PartnerProducts.Add(newPartnerProducts);
                context.SaveChanges();  
            }
            MessageBox.Show("Продажа добавлена");

            LoadHistory();  


        }

        private void dataGridViewPartners_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

       
    }
}


	 
]]></Code>
  </Snippet>
</CodeSnippet>
